const map = require("./map");
const report = require("./report");

//traer usersRoom.js
const rooms = [
  {
    name: "ðŸŸ§sala principalðŸŸ§",
    color: "ðŸŸ§",
    img: "./src/commands/murder/src/maps/conservatorio/salaPrincipal.png",
    posible: [
      {
        name: "ðŸŸ¨pasillo 1ðŸŸ¨",
        color: "ðŸŸ¨",
      },
      {
        name: "ðŸŸ©pasillo 2ðŸŸ©",
        color: "ðŸŸ©",
      },
    ],
  },
  {
    name: "ðŸŸ©pasillo 2ðŸŸ©",
    color: "ðŸŸ©",
    img: "./src/commands/murder/src/maps/conservatorio/pasillo2.png",
    posible: [
      {
        name: "ðŸŸ§sala principalðŸŸ§",
        color: "ðŸŸ§",
      },
      {
        name: "ðŸŸ¦sala de estudioðŸŸ¦",
        color: "ðŸŸ¦",
      },
    ],
  },
  {
    name: "ðŸŸ¦sala de estudioðŸŸ¦",
    color: "ðŸŸ¦",
    img: "./src/commands/murder/src/maps/conservatorio/salaDeEstudio.png",
    posible: [{ name: "ðŸŸ©pasillo 2ðŸŸ©", color: "ðŸŸ©" }],
  },
  {
    name: "ðŸŸ¨pasillo 1ðŸŸ¨",
    color: "ðŸŸ¨",
    img: "./src/commands/murder/src/maps/conservatorio/pasillo1.png",
    posible: [
      {
        name: "ðŸŸ§sala principalðŸŸ§",
        color: "ðŸŸ§",
      },
      {
        name: "ðŸŸªobservatorioðŸŸª",
        color: "ðŸŸª",
      },
      {
        name: "ðŸŸ«sotanoðŸŸ«",
        color: "ðŸŸ«",
      },
      {
        name: "â¬›baÃ±osâ¬›",
        color: "â¬›",
      },
      {
        name: "â¬œcentralâ¬œ",
        color: "â¬œ",
      },
    ],
  },
  {
    name: "ðŸŸªobservatorioðŸŸª",
    color: "ðŸŸª",
    img: "./src/commands/murder/src/maps/conservatorio/observatorio.png",
    posible: [
      {
        name: "ðŸŸ¨pasillo 1ðŸŸ¨",
        color: "ðŸŸ¨",
      },
    ],
  },
  {
    name: "â¬œcentralâ¬œ",
    color: "â¬œ",
    img: "./src/commands/murder/src/maps/conservatorio/central.png",
    posible: [
      {
        name: "ðŸŸ¨pasillo 1ðŸŸ¨",
        color: "ðŸŸ¨",
      },
    ],
  },
  {
    name: "ðŸŸ«sotanoðŸŸ«",
    color: "ðŸŸ«",
    img: "./src/commands/murder/src/maps/conservatorio/sotano.png",
    posible: [
      {
        name: "ðŸŸ¨pasillo 1ðŸŸ¨",
        color: "ðŸŸ¨",
      },
    ],
  },
  {
    name: "â¬›baÃ±osâ¬›",
    color: "â¬›",
    img: "./src/commands/murder/src/maps/conservatorio/banos.png",
    posible: [
      {
        name: "ðŸŸ¨pasillo 1ðŸŸ¨",
        color: "ðŸŸ¨",
      },
    ],
  },
];

async function go(message, config, client, user, defaultState) {
  function showPlayers(out) {
    let usersWithMe = "";

    if (out == true) {
      config.players.map((data) => {
        if (
          data.room.name == user.room.name &&
          data.userInfo.id != user.userInfo.id
        ) {
          if (data.live == true) {
            usersWithMe = `${usersWithMe} - ${data.name}`;
          } else {
            usersWithMe = `${usersWithMe} - **cadÃ¡ver del ${data.name}**`;
          }
        }
      });

      config.players.map((data) => {
        if (
          data.room.name == user.room.name &&
          data.userInfo.id != user.userInfo.id
        ) {
          client.users.cache
            .get(data.userInfo.id)
            .send(
              `**en la sala:** ${usersWithMe.replace(
                data.name,
                `**${data.name}**`
              )}`
            );
        }
      });
    } else {
      config.players.map((data) => {
        if (data.room.name == user.room.name) {
          if (data.live == true) {
            usersWithMe = `${usersWithMe} - ${data.name}`;
          } else {
            usersWithMe = `${usersWithMe} - ** cadÃ¡ver del ${data.name}**`;
          }
        }
      });

      config.players.map((data) => {
        if (data.room.name == user.room.name) {
          client.users.cache
            .get(data.userInfo.id)
            .send(
              `**en la sala:** ${usersWithMe.replace(
                data.name,
                `**${data.name}**`
              )}`
            );
        }
      });
    }
  }

  //principal Code
  await map(config, user);

  user.msg.msg = await client.users.cache
    .get(user.userInfo.id)
    .send(user.msg.embed);

  user.room.posible.map(async (data) => {
    if(user.room.name == rooms[0].name){
      await user.msg.msg.react("âš ");
    }

    await user.msg.msg.react(data.color);
  });

  let filter = (reaction) => {
    return ["âš ", "ðŸŸ¨", "ðŸŸ©", "ðŸŸ§", "ðŸŸ¦", "ðŸŸª", "â¬œ", "â¬›", "ðŸŸ«"].includes(
      reaction.emoji.name
    );
  };

  let collector = user.msg.msg.createReactionCollector(filter, {
    idle: 60000,
  });

  collector.on("collect", async (reaction, u) => {
    if (u.id != process.env.ID) {
      if (user.live == true) {
        if(config.report != true){
          let verification = user.room.posible.find((data) => {
            return data.color == reaction.emoji.name;
          });

          if (reaction.emoji.name == "âš ") {
            report(message, config, client, defaultState, go);
          }

          if (verification != undefined) {
            await showPlayers(true);

            user.room = rooms.find((data) => {
              return data.name == verification.name;
            });

            showPlayers(false);

            go(message, config, client, user, defaultState);
          }

        }
      }
    }
  });
}

module.exports = go;
